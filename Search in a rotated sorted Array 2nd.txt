bool searchInARotatedSortedArrayII(vector<int>& A, int key) {
    int n = A.size();
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (A[mid] == key) return true;
        if (A[low] == A[mid] && A[mid] == A[high]) {
            low++;
            high--;
            continue;
        }
        if (A[low] <= A[mid]) {
            if (A[low] <= key && key <= A[mid]) high = mid - 1;
            else low = mid + 1;
        } else {
            if (A[mid] <= key && key <= A[high]) low = mid + 1;
            else high = mid - 1;
        }
    }
    return false; 
}


Brute Force Approach:

Iterate through each element of the array A.
Check if the current element is equal to the target key.
If found, return true.
If the loop completes without finding the target, return false.
Time Complexity: O(n), where n is the number of elements in the array.

Space Complexity: O(1), as no additional space is required beyond the input array.

Optimal Approach:

Initialize pointers low and high to the start and end of the array respectively.
While low is less than or equal to high, perform binary search:
a. Calculate the midpoint mid.
b. If A[mid] equals key, return true.
c. Check if the subarray from low to mid or mid to high is sorted.
d. Adjust low and high pointers accordingly based on whether the target lies in the sorted half.
If the loop completes without finding the target, return false.
Time Complexity: O(log n), where n is the number of elements in the array.

Space Complexity: O(1), as the solution utilizes only a few integer variables for storing indices.